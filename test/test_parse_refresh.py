import unittest
import base64
import ctypes
from piestats.status import RefreshStruct

response = base64.b64decode('''BkNCZWJlZQAAAAAAAAAAAAAAAAAAAAAAAAtaYW15aHJ1c2hrYQAAAAAAAAAAAAAAAAAKU2xhdlsxxAACAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANABAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdDIyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKw4HDKASBe6Tgru6QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHY3RmX0FzaAAAAAAAAAAAAKDxBABKwgQAHgAE''')  # noqa


class TestParseEvents(unittest.TestCase):

  def test_parse(self):
    r = RefreshStruct()

    # Apparently only way of constructing a ctypes structure from a string
    buff = ctypes.create_string_buffer(response)
    ctypes.memmove(ctypes.addressof(r), ctypes.addressof(buff), ctypes.sizeof(r))

    self.assertEqual(r.map_name.text, 'ctf_Ash')
    self.assertEqual(r.mode, 0)

    names = ['CBebee', 'Zamyhrushka', 'Slav[1109]']

    for i, name in enumerate(names):
      self.assertEqual(r.player_names[i].text, name)

if __name__ == '__main__':
  unittest.main()
